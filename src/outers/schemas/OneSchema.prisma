datasource db {
  provider = "postgresql"
  url      = env("DS_1_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  MALE
  FEMALE
}

enum Status {
  ON
  OFF
}

enum Payment {
  CASH
  BALANCE
}

model User {
  id                    String                @id
  fullName              String                @db.VarChar(50)
  address               String                @db.VarChar(50)
  email                 String                @db.VarChar(50)
  password              String
  username              String                @db.VarChar(50)
  balance               Float
  gender                Gender?
  experience            Int
  lastLatitude          Float
  lastLongitude         Float
  updatedAt             DateTime
  createdAt             DateTime
  deletedAt             DateTime?
  notificationHistories NotificationHistory[]
  topUpHistories        TopUpHistory[]
  transactionHistories  TransactionHistory[]
  userSubscriptions     UserSubscription[]
}

model Vendor {
  id                    String                @id
  fullName              String                @db.VarChar(50)
  address               String                @db.VarChar(50)
  email                 String                @db.VarChar(50)
  password              String
  username              String                @db.VarChar(50)
  balance               Float
  gender                Gender?
  experience            Int
  lastLatitude          Float
  lastLongitude         Float
  jajanImageUrl         String                @db.VarChar(50)
  jajanName             String                @db.VarChar(50)
  jajanDescription      String
  status                Status
  updatedAt             DateTime
  createdAt             DateTime
  deletedAt             DateTime?
  notificationHistories NotificationHistory[]
  jajanItems            JajanItem[]
}

model Admin {
  id        String    @id
  fullName  String    @db.VarChar(50)
  email     String    @db.VarChar(50)
  password  String
  gender    Gender?
  updatedAt DateTime
  createdAt DateTime
  deletedAt DateTime?
}

model JajanItem {
  id                   String               @id
  vendorId             String
  vendor               Vendor               @relation(fields: [vendorId], references: [id])
  categoryId           String
  category             Category             @relation(fields: [categoryId], references: [id])
  name                 String               @db.VarChar(50)
  price                Int
  imageUrl             String               @db.VarChar(50)
  updatedAt            DateTime
  createdAt            DateTime
  deletedAt            DateTime?
  transactionHistories TransactionHistory[]
}

model Category {
  id                String             @id
  categoryName      String             @db.VarChar(50)
  iconUrl           String             @db.VarChar(50)
  updatedAt         DateTime
  createdAt         DateTime
  deletedAt         DateTime?
  jajanItems        JajanItem[]
  userSubscriptions UserSubscription[]
}

model NotificationHistory {
  id        String    @id
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  vendorId  String
  vendor    Vendor    @relation(fields: [vendorId], references: [id])
  updatedAt DateTime
  createdAt DateTime
  deletedAt DateTime?
}

model TopUpHistory {
  id        String    @id
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  amount    Float
  media     String    @db.VarChar(50)
  updatedAt DateTime
  createdAt DateTime
  deletedAt DateTime?
}

model UserLevel {
  id                String    @id
  name              String    @db.VarChar(50)
  minimumExperience Int
  iconUrl           String    @db.VarChar(50)
  updatedAt         DateTime
  createdAt         DateTime
  deletedAt         DateTime?
}

model VendorLevel {
  id                String    @id
  name              String    @db.VarChar(50)
  minimumExperience Int
  iconUrl           String    @db.VarChar(50)
  updatedAt         DateTime
  createdAt         DateTime
  deletedAt         DateTime?
}

model UserSubscription {
  id         String    @id
  userId     String
  categoryId String
  updatedAt  DateTime
  createdAt  DateTime
  deletedAt  DateTime?
  user       User      @relation(fields: [userId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])
}

model TransactionHistory {
  id            String    @id
  userId        String
  jajanItemId   String
  amount        Int
  paymentType   Payment
  lastLatitude  Float
  lastLongitude Float
  updatedAt     DateTime
  createdAt     DateTime
  deletedAt     DateTime?
  user          User      @relation(fields: [userId], references: [id])
  jajanItem     JajanItem @relation(fields: [jajanItemId], references: [id])
}
