datasource db {
  provider = "postgresql"
  url      = env("DS_1_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  MALE
  FEMALE
}

enum Status {
  ON
  OFF
}

enum PaymentMethod {
  CASH
  BALANCE
}

model User {
  id                    String                @id
  fullName              String                @db.VarChar(255)
  address               String                @db.VarChar(255)
  email                 String                @db.VarChar(255)
  password              String
  username              String                @db.VarChar(255)
  balance               Float
  gender                Gender
  experience            Int
  lastLatitude          Float
  lastLongitude         Float
  updatedAt             DateTime              @db.Timestamptz
  createdAt             DateTime              @db.Timestamptz
  deletedAt             DateTime?             @db.Timestamptz
  notificationHistories NotificationHistory[]
  topUpHistories        TopUpHistory[]
  transactionHistories  TransactionHistory[]
  userSubscriptions     UserSubscription[]
}

model Vendor {
  id                    String                @id
  fullName              String                @db.VarChar(255)
  address               String                @db.VarChar(255)
  email                 String                @db.VarChar(255)
  password              String
  username              String                @db.VarChar(255)
  balance               Float
  gender                Gender
  experience            Int
  lastLatitude          Float
  lastLongitude         Float
  jajanImageUrl         String                @db.VarChar(255)
  jajanName             String                @db.VarChar(255)
  jajanDescription      String
  status                Status
  updatedAt             DateTime              @db.Timestamptz
  createdAt             DateTime              @db.Timestamptz
  deletedAt             DateTime?             @db.Timestamptz
  notificationHistories NotificationHistory[]
  jajanItems            JajanItem[]
  payoutHistories       PayoutHistory[]
  jajanItemSnapshots    JajanItemSnapshot[]
  payouts               VendorPayout[]
}

model Admin {
  id        String    @id
  fullName  String    @db.VarChar(255)
  email     String    @db.VarChar(255)
  password  String
  gender    Gender
  updatedAt DateTime  @db.Timestamptz
  createdAt DateTime  @db.Timestamptz
  deletedAt DateTime? @db.Timestamptz
}

model JajanItem {
  id         String              @id
  vendorId   String
  categoryId String
  name       String              @db.VarChar(255)
  price      Int
  imageUrl   String              @db.VarChar(255)
  updatedAt  DateTime            @db.Timestamptz
  createdAt  DateTime            @db.Timestamptz
  deletedAt  DateTime?           @db.Timestamptz
  vendor     Vendor              @relation(fields: [vendorId], references: [id])
  category   Category            @relation(fields: [categoryId], references: [id])
  snapshots  JajanItemSnapshot[]
}

model JajanItemSnapshot {
  id                       String                   @id
  originId                 String
  vendorId                 String
  categoryId               String
  name                     String                   @db.VarChar(255)
  price                    Int
  imageUrl                 String                   @db.VarChar(255)
  updatedAt                DateTime                 @db.Timestamptz
  createdAt                DateTime                 @db.Timestamptz
  deletedAt                DateTime?                @db.Timestamptz
  transactionItemHistories TransactionItemHistory[]
  vendor                   Vendor                   @relation(fields: [vendorId], references: [id])
  category                 Category                 @relation(fields: [categoryId], references: [id])
  origin                   JajanItem                @relation(fields: [originId], references: [id])
}

model Category {
  id                 String              @id
  name               String              @db.VarChar(255)
  iconUrl            String              @db.VarChar(255)
  updatedAt          DateTime            @db.Timestamptz
  createdAt          DateTime            @db.Timestamptz
  deletedAt          DateTime?           @db.Timestamptz
  jajanItems         JajanItem[]
  userSubscriptions  UserSubscription[]
  jajanItemSnapshots JajanItemSnapshot[]
}

model NotificationHistory {
  id        String    @id
  userId    String
  vendorId  String
  updatedAt DateTime  @db.Timestamptz
  createdAt DateTime  @db.Timestamptz
  deletedAt DateTime? @db.Timestamptz
  user      User      @relation(fields: [userId], references: [id])
  vendor    Vendor    @relation(fields: [vendorId], references: [id])
}

model TopUpHistory {
  id              String    @id
  xenditInvoiceId String
  userId          String
  amount          Float
  media           String    @db.VarChar(255)
  updatedAt       DateTime  @db.Timestamptz
  createdAt       DateTime  @db.Timestamptz
  deletedAt       DateTime? @db.Timestamptz
  user            User      @relation(fields: [userId], references: [id])
}

model PayoutHistory {
  id             String    @id
  xenditPayoutId String
  vendorId       String
  amount         Float
  media          String    @db.VarChar(255)
  updatedAt      DateTime  @db.Timestamptz
  createdAt      DateTime  @db.Timestamptz
  deletedAt      DateTime? @db.Timestamptz
  vendor         Vendor    @relation(fields: [vendorId], references: [id])
}

model UserLevel {
  id                String    @id
  name              String    @db.VarChar(255)
  minimumExperience Int
  iconUrl           String    @db.VarChar(255)
  updatedAt         DateTime  @db.Timestamptz
  createdAt         DateTime  @db.Timestamptz
  deletedAt         DateTime? @db.Timestamptz
}

model VendorLevel {
  id                String    @id
  name              String    @db.VarChar(255)
  minimumExperience Int
  iconUrl           String    @db.VarChar(255)
  updatedAt         DateTime  @db.Timestamptz
  createdAt         DateTime  @db.Timestamptz
  deletedAt         DateTime? @db.Timestamptz
}

model UserSubscription {
  id         String    @id
  userId     String
  categoryId String
  updatedAt  DateTime  @db.Timestamptz
  createdAt  DateTime  @db.Timestamptz
  deletedAt  DateTime? @db.Timestamptz
  user       User      @relation(fields: [userId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])
}

model TransactionHistory {
  id               String                   @id
  userId           String
  paymentMethod    PaymentMethod
  lastLatitude     Float
  lastLongitude    Float
  updatedAt        DateTime                 @db.Timestamptz
  createdAt        DateTime                 @db.Timestamptz
  deletedAt        DateTime?                @db.Timestamptz
  user             User                     @relation(fields: [userId], references: [id])
  transactionItems TransactionItemHistory[]
}

model TransactionItemHistory {
  id                  String             @id
  transactionId       String
  jajanItemSnapshotId String
  quantity            Float
  updatedAt           DateTime           @db.Timestamptz
  createdAt           DateTime           @db.Timestamptz
  deletedAt           DateTime?          @db.Timestamptz
  transaction         TransactionHistory @relation(fields: [transactionId], references: [id])
  jajanItem           JajanItemSnapshot  @relation(fields: [jajanItemSnapshotId], references: [id])
}

model VendorPayout {
  id        String    @id
  vendorId  String
  payoutId  String
  updatedAt DateTime  @db.Timestamptz
  createdAt DateTime  @db.Timestamptz
  deletedAt DateTime? @db.Timestamptz
  vendor    Vendor    @relation(fields: [vendorId], references: [id])
}
